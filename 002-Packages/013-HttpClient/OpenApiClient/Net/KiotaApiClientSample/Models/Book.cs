// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace KiotaDemoApiClient.Models {
    public class Book : IParsable {
        /// <summary>The author property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public KiotaDemoApiClient.Models.Author? Author { get; set; }
#nullable restore
#else
        public KiotaDemoApiClient.Models.Author Author { get; set; }
#endif
        /// <summary>The episode property</summary>
        public int? Episode { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The isReprint property</summary>
        public bool? IsReprint { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The price property</summary>
        public double? Price { get; set; }
        /// <summary>The publishDate property</summary>
        public DateTimeOffset? PublishDate { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Book CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Book();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"author", n => { Author = n.GetObjectValue<KiotaDemoApiClient.Models.Author>(KiotaDemoApiClient.Models.Author.CreateFromDiscriminatorValue); } },
                {"episode", n => { Episode = n.GetIntValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"isReprint", n => { IsReprint = n.GetBoolValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"price", n => { Price = n.GetDoubleValue(); } },
                {"publishDate", n => { PublishDate = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<KiotaDemoApiClient.Models.Author>("author", Author);
            writer.WriteIntValue("episode", Episode);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isReprint", IsReprint);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("price", Price);
            writer.WriteDateTimeOffsetValue("publishDate", PublishDate);
        }
    }
}
